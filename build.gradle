import org.apache.tools.ant.filters.ReplaceTokens

plugins {
    id 'java'
    id 'application'
    id 'com.github.johnrengelman.shadow' version '6.0.0'
    id 'com.gorylenko.gradle-git-properties'version '2.2.3'
    id 'org.ajoberstar.grgit' version '4.0.2'
}

group 'de.anteiku'
mainClassName = 'de.anteiku.kittybot.KittyBot'
version = "${versionFromTag()}".toString()
ext {
    moduleName = 'Lavalink-Server'
}
compileJava.options.encoding = 'UTF-8'

repositories {
    jcenter()
    maven { url 'https://jitpack.io' }
}

dependencies {
    // discord/jda related
    implementation 'net.dv8tion:JDA:4.2.0_202'
    implementation 'com.jagrosh:jda-utilities:3.0.4'
    implementation 'com.github.sedmelluq:lavaplayer:bec3995'
    implementation("com.github.FredBoat:Lavalink-Client:c2aeb28") {
        exclude group: 'com.sedmelluq', module: 'lavaplayer'
    }

    // database
    implementation 'com.zaxxer:HikariCP:3.4.5'
    implementation 'org.postgresql:postgresql:42.2.16'

    // logging
    implementation 'ch.qos.logback:logback-classic:1.2.3'
    implementation 'io.sentry:sentry-logback:1.7.30'

    // other
    implementation 'org.discordbots:DBL-Java-Library:2.0.1'
    implementation 'io.javalin:javalin:3.10.0'
    implementation 'org.yaml:snakeyaml:1.26'
    implementation 'io.github.classgraph:classgraph:4.8.78'
}

processResources {
    //inject values into app.properties
    filesMatching("**/app.properties") {
        filter ReplaceTokens, tokens: [
                "project.version"   : project.version,
                "project.groupId"   : project.group,
                "project.artifactId": project.ext.moduleName,
                "env.BUILD_NUMBER"  : (System.getenv('CI') ? System.getenv('BUILD_NUMBER') : 'Unofficial'),
                "env.BUILD_TIME"    : System.currentTimeMillis() + ''
        ]
    }
}

build {
    doLast {
        println 'Version: ' + version
    }
}

@SuppressWarnings("GrMethodMayBeStatic")
String versionFromTag() {

    def headTag = grgit.tag.list().find {
        it.commit.getId() == grgit.head().getId()
    }

    // Uncommitted changes? -> should be SNAPSHOT
    // Also watch out for false positives in the CI build
    def clean = grgit.status().clean || System.getenv('CI') != null

    if (!clean) {
        println("Git state is dirty, setting version as snapshot")
    }

    if (headTag && clean) {
        headTag.getName()
    } else {
        "${grgit.head().id}-SNAPSHOT"
    }
}

//create a simple version file that we will be reading to create appropriate docker tags
void versionTxt() {
    new File("$projectDir/VERSION.txt").text = "$project.version\n"
}

versionTxt()
