/*
 * This file is generated by jOOQ.
 */
package de.kittybot.kittybot.database.jooq.tables.records;


import de.kittybot.kittybot.database.jooq.tables.Commands;

import java.time.LocalDateTime;

import org.jooq.Field;
import org.jooq.Record3;
import org.jooq.Row3;
import org.jooq.impl.TableRecordImpl;
import org.jooq.types.YearToSecond;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class CommandsRecord extends TableRecordImpl<CommandsRecord> implements Record3<String, YearToSecond, LocalDateTime> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>public.commands.command</code>.
     */
    public CommandsRecord setCommand(String value) {
        set(0, value);
        return this;
    }

    /**
     * Getter for <code>public.commands.command</code>.
     */
    public String getCommand() {
        return (String) get(0);
    }

    /**
     * Setter for <code>public.commands.processing_time</code>.
     */
    public CommandsRecord setProcessingTime(YearToSecond value) {
        set(1, value);
        return this;
    }

    /**
     * Getter for <code>public.commands.processing_time</code>.
     */
    public YearToSecond getProcessingTime() {
        return (YearToSecond) get(1);
    }

    /**
     * Setter for <code>public.commands.time</code>.
     */
    public CommandsRecord setTime(LocalDateTime value) {
        set(2, value);
        return this;
    }

    /**
     * Getter for <code>public.commands.time</code>.
     */
    public LocalDateTime getTime() {
        return (LocalDateTime) get(2);
    }

    // -------------------------------------------------------------------------
    // Record3 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row3<String, YearToSecond, LocalDateTime> fieldsRow() {
        return (Row3) super.fieldsRow();
    }

    @Override
    public Row3<String, YearToSecond, LocalDateTime> valuesRow() {
        return (Row3) super.valuesRow();
    }

    @Override
    public Field<String> field1() {
        return Commands.COMMANDS.COMMAND;
    }

    @Override
    public Field<YearToSecond> field2() {
        return Commands.COMMANDS.PROCESSING_TIME;
    }

    @Override
    public Field<LocalDateTime> field3() {
        return Commands.COMMANDS.TIME;
    }

    @Override
    public String component1() {
        return getCommand();
    }

    @Override
    public YearToSecond component2() {
        return getProcessingTime();
    }

    @Override
    public LocalDateTime component3() {
        return getTime();
    }

    @Override
    public String value1() {
        return getCommand();
    }

    @Override
    public YearToSecond value2() {
        return getProcessingTime();
    }

    @Override
    public LocalDateTime value3() {
        return getTime();
    }

    @Override
    public CommandsRecord value1(String value) {
        setCommand(value);
        return this;
    }

    @Override
    public CommandsRecord value2(YearToSecond value) {
        setProcessingTime(value);
        return this;
    }

    @Override
    public CommandsRecord value3(LocalDateTime value) {
        setTime(value);
        return this;
    }

    @Override
    public CommandsRecord values(String value1, YearToSecond value2, LocalDateTime value3) {
        value1(value1);
        value2(value2);
        value3(value3);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached CommandsRecord
     */
    public CommandsRecord() {
        super(Commands.COMMANDS);
    }

    /**
     * Create a detached, initialised CommandsRecord
     */
    public CommandsRecord(String command, YearToSecond processingTime, LocalDateTime time) {
        super(Commands.COMMANDS);

        setCommand(command);
        setProcessingTime(processingTime);
        setTime(time);
    }
}
