/*
 * This file is generated by jOOQ.
 */
package de.kittybot.kittybot.jooq.tables.records;


import de.kittybot.kittybot.jooq.tables.Voters;

import java.time.LocalDateTime;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record3;
import org.jooq.Row3;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class VotersRecord extends UpdatableRecordImpl<VotersRecord> implements Record3<Long, Long, LocalDateTime> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>public.voters.id</code>.
     */
    public VotersRecord setId(Long value) {
        set(0, value);
        return this;
    }

    /**
     * Getter for <code>public.voters.id</code>.
     */
    public Long getId() {
        return (Long) get(0);
    }

    /**
     * Setter for <code>public.voters.user_id</code>.
     */
    public VotersRecord setUserId(Long value) {
        set(1, value);
        return this;
    }

    /**
     * Getter for <code>public.voters.user_id</code>.
     */
    public Long getUserId() {
        return (Long) get(1);
    }

    /**
     * Setter for <code>public.voters.vote_expiry</code>.
     */
    public VotersRecord setVoteExpiry(LocalDateTime value) {
        set(2, value);
        return this;
    }

    /**
     * Getter for <code>public.voters.vote_expiry</code>.
     */
    public LocalDateTime getVoteExpiry() {
        return (LocalDateTime) get(2);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<Long> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record3 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row3<Long, Long, LocalDateTime> fieldsRow() {
        return (Row3) super.fieldsRow();
    }

    @Override
    public Row3<Long, Long, LocalDateTime> valuesRow() {
        return (Row3) super.valuesRow();
    }

    @Override
    public Field<Long> field1() {
        return Voters.VOTERS.ID;
    }

    @Override
    public Field<Long> field2() {
        return Voters.VOTERS.USER_ID;
    }

    @Override
    public Field<LocalDateTime> field3() {
        return Voters.VOTERS.VOTE_EXPIRY;
    }

    @Override
    public Long component1() {
        return getId();
    }

    @Override
    public Long component2() {
        return getUserId();
    }

    @Override
    public LocalDateTime component3() {
        return getVoteExpiry();
    }

    @Override
    public Long value1() {
        return getId();
    }

    @Override
    public Long value2() {
        return getUserId();
    }

    @Override
    public LocalDateTime value3() {
        return getVoteExpiry();
    }

    @Override
    public VotersRecord value1(Long value) {
        setId(value);
        return this;
    }

    @Override
    public VotersRecord value2(Long value) {
        setUserId(value);
        return this;
    }

    @Override
    public VotersRecord value3(LocalDateTime value) {
        setVoteExpiry(value);
        return this;
    }

    @Override
    public VotersRecord values(Long value1, Long value2, LocalDateTime value3) {
        value1(value1);
        value2(value2);
        value3(value3);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached VotersRecord
     */
    public VotersRecord() {
        super(Voters.VOTERS);
    }

    /**
     * Create a detached, initialised VotersRecord
     */
    public VotersRecord(Long id, Long userId, LocalDateTime voteExpiry) {
        super(Voters.VOTERS);

        setId(id);
        setUserId(userId);
        setVoteExpiry(voteExpiry);
    }
}
